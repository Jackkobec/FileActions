package com.jss.fileactions;


import java.io.*;
import java.util.ArrayList;

import java.util.List;

/**
 * Bash realisation
 */
public class Bash implements IBash, Cloneable, Serializable {

    String default_path = "d://FileActions.txt";

    /**
     * Correct show List<String>: next element - next line without "," "[ ]" and other symbols
     */


    public <T> void listStrCorrectShow(List<T> list) {
        for (T s : list) {
            System.out.println(s);
        }
    }

    /**
     * Read info from the file
     */

    public String less(String path) throws FileNotFoundException {
        File file = new File(path);
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }
        //we will build string with StringBuilder
        StringBuilder sb = new StringBuilder();

        try {
            //create input stream
            BufferedReader in = new BufferedReader(new FileReader(file.getAbsoluteFile()));
            try {
                //create variable for the append with StringBuilder
                String string;
                //read file line by line until EOF(find first empty line)
                while ((string = in.readLine()) != null) {
                    sb.append(string + "\n");
                }
                //close with finally
            } finally {
                in.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
        return sb.toString();
    }

    /**
     * Write info to the file
     */
    @Override
    public void writeInto(String path, String content) throws FileNotFoundException {
        try {
            File file = new File(path);
            //check file present, create new if not
            if (!file.exists()) {
                file.createNewFile();
            }
            //create output stream
            PrintWriter out = new PrintWriter(file.getAbsoluteFile());
            try {
                out.print(content);
                //close in the finally for don't forget this action
            } finally {
                out.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Updating  info in the file version used earlier methods less and writeInto
     */
    @Override
    public void appendTo(String path, String content) throws FileNotFoundException {
        File file = new File(path);
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }
        StringBuilder sb = new StringBuilder();
        //read current info fom file, add it to StringBuilder
        sb.append(less(path));
        //add new content to the StringBuilder
        sb.append(content);
        //rewriting current file with new content
        writeInto(path, sb.toString());

    }

    /**
     * Show dir forks
     */
    @Override
    public List<String> ls(String currentDirPath) throws FileNotFoundException {
        File file = new File(currentDirPath);
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный путь отсуствует");
        }
        //Take all filenames from the currentDirPath > to the File[]
        File[] files = file.listFiles();
        if (files.length == 0) {
            System.out.println("Dir " + currentDirPath + " is empty");
        }
        List<String> resaultArray = new ArrayList<>();
        //Output all filenames from currentDirPath on console > write names to the  List<String> for return action
        for (int i = 0; i < files.length; i++) {

            System.out.println(files[i].getName());
            resaultArray.add(files[i].getName());
        }

        return resaultArray;
    }

    /**
     * Create dir by path
     */
    @Override
    public boolean touch(String path) throws IOException {
        File file = new File(path);
        //check this path, if ton present - create new directory
        if (!file.exists()) {
            file.mkdir();
        }
        return true;
    }

    /**
     * Delete file by path
     */
    @Override
    public boolean delete(String path) throws FileNotFoundException {
        File file = new File(path);
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }
        file.delete();
        return true;
    }

    /**
     * Copying file
     */
    @Override
    public boolean copy(String src, String dest) throws FileNotFoundException {
        StringBuilder sb = new StringBuilder();
        File fileSrc = new File(src);
        if (!fileSrc.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }

        try {
            File fileDest = new File(dest);
            if (!fileDest.exists()) {
                fileDest.createNewFile();
            }
            sb.append(less(src));
            writeInto(dest, less(src).toString());
        } catch (IOException e) {
            e.printStackTrace();
        }


        return true;
    }

    /**
     * Show lines with keyWord
     */
    @Override
    public List<String> grep(String src, String keyWord) throws FileNotFoundException {
        File file = new File(src);
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }
        //we will build string with StringBuilder
        StringBuilder sb = new StringBuilder();

        List<String> resultArray = new ArrayList<>();
        try {
            //create input stream
            BufferedReader in = new BufferedReader(new FileReader(file.getAbsoluteFile()));
            try {
                //create variable for the append with StringBuilder
                String string;
                System.out.println("По запросу " + "\"" + keyWord + "\"" + " найдено:");
                //read file line by line until EOF(find first empty line)
                while ((string = in.readLine()) != null) {

                    //find the keyWord in the current line
                    if (string.contains(keyWord)) {
                        sb.append(string.replaceAll(keyWord, "\"" + keyWord + "\""));
                        //add to the array current line with keyWord \ add " " to keyWord
                        resultArray.add(string.replaceAll(keyWord, "\"" + keyWord + "\"") + "\n");

                    }

                }
                //close with finally
            } finally {
                in.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
        return resultArray;
    }

    /**
     * Cloning the objects
     */
    @Override
    // Cloneable implement must be declared on the class signature
    public Object clone(Object obj) {
        try {
            //Cloning through the superclass
            return super.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public byte[] toByteArr(Object obj) throws IOException {
        File file = new File("d://TestDir/Byte.txt");
        if (!file.exists()) {
            file.createNewFile();
        }
        FileOutputStream fos = new FileOutputStream(file);
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.write((byte[]) obj);
        return (byte[]) obj;

    }

    @Override
    public Object fromByteArr(byte[] arr) throws IOException {


        File file = new File("d://TestDir/Byte.txt");
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }

        FileInputStream fis = new FileInputStream(file);
        ObjectInputStream ois = new ObjectInputStream(fis);
        Object obj = ois.read(arr);

        return obj;
    }

    @Override
    public Object cloneDeep(Object obj) throws IOException {
        File file = new File("d://TestDir/Byte.txt");
        if (!file.exists()) {
            file.createNewFile();
        }
        FileOutputStream fos = new FileOutputStream(file);
        ObjectOutputStream oos = new ObjectOutputStream(fos);


        return null;
    }

    @Override
    public boolean saveObjToFile(Object obj, String filePath) throws IOException {
        File file = new File(filePath);
        if (!file.exists()) {
            file.createNewFile();
        }
        FileOutputStream fos = new FileOutputStream(file);
        ObjectOutputStream oos = new ObjectOutputStream(fos);

        oos.writeObject(obj);
        oos.flush();
        oos.close();

        return true;
    }

    @Override
    public <T> T deSerialization(T obj, String filePath) throws IOException, ClassNotFoundException {
        File file = new File(filePath);
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }
        FileInputStream fis = new FileInputStream(file);
        ObjectInputStream ois = new ObjectInputStream(fis);
        Object replicatedObj = (T) ois.readObject();
        return (T) replicatedObj;
    }


    @Override
    public boolean downloadFile(String url, String localPathName) throws IOException, ClassNotFoundException {
        File urlFile = new File(url);
        File lockalFile = new File(localPathName);
        if (!urlFile.canRead()) {
            throw new FileCantDownloadExeption("Cant download file");
        } else if (!lockalFile.exists()) {
            lockalFile.createNewFile();
        }

        FileInputStream fis = new FileInputStream(urlFile);
        ObjectInputStream ois = new ObjectInputStream(fis);
        Object obj = ois.readObject();

        saveObjToFile(obj, lockalFile.getAbsolutePath());
        return true;
    }


    /**
     * Find from the start-tree dir and in the all forks
     */
    @Override
    public List<String> find(File dir, List<String> resaultArray, String keyWord) throws IOException {
        File file = new File(dir.getPath());
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }
        //get list of files in the current dir
        File[] files = file.listFiles();

        //if length of the File[] array == 0   ist mean that dir is empty
        if (files.length == 0) {
            System.out.println("Dir " + dir + " is empty");
        }
        //move trough array of the inner files of current dir
        for (int i = 0; i < files.length; i++) {
            //check is dir the i-file
            if (files[i].isDirectory()) {
                //check equals keyWord and i-file
                if (files[i].getName().equalsIgnoreCase(keyWord)) {
                    //append founded file name to the List<String> resaultArray
                    resaultArray.add("--------------------------------------\n" + "File " + "\"" + files[i].getName()
                            + "\"" + " found in:  " + files[i].getAbsolutePath());
                }
                //recursive call this method for the forks directories
                find(files[i], resaultArray, keyWord);
            }
        }
        return resaultArray;
    }

    /**
     * Refactored Find from the start-tree dir and in the all forks
     */
    @Override
    public List<String> findRefactored(File dir, List<String> resaultArray, String keyWord) throws IOException {
        File file = new File(dir.getPath());
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }
        if (file.getName().contains(keyWord)) {
            resaultArray.add("--------------------------------------\n" + ((file.isDirectory()) ? "Dir " : "File ")
                    + "\"" + file.getName() + "\"" + " found in:  " + file.getAbsolutePath());
        }
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File f : files) {
                findRefactored(f.getCanonicalFile(), resaultArray, keyWord);
            }
        }
        return resaultArray;
    }

    @Override
    public List<String> findRefactored2(File dir, List<String> resaultArray, String keyWord) throws IOException {
        File file = new File(dir.getPath());
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }
        //get list of files in the current dir
        File[] files = file.listFiles();

        //if length of the File[] array == 0   ist mean that dir is empty
        if (files.length == 0) {
            System.out.println("Dir " + dir + " is empty");
        }
        //move trough array of the inner files of current dir
        for (File f : files) {
            if (f.isFile()) {
                continue;
            }
            //joined check is dir the i-file and equals his name to keyWord
            if (f.isDirectory() && f.getName().equalsIgnoreCase(keyWord)) {
                //append founded file name to the List<String> resaultArray
                resaultArray.add("--------------------------------------\n" + "File "
                        + "\"" + f.getName() + "\"" + " found in:  " + f.getAbsolutePath());
            }
            //recursive call this method for the forks directories
            findRefactored2(f.getCanonicalFile(), resaultArray, keyWord);
        }
        return resaultArray;
    }


   /* public List<String> findRefactored3(File dir, List<String> resaultArray, String keyWord) throws IOException {
        File file = new File(dir.getPath());
        if (!file.exists()) {
            throw new FileNotFoundException("Указанный файл отсуствует");
        }
        //get list of files in the current dir
        File[] files = file.listFiles();
        //if length of the File[] array == 0   ist mean that dir is empty
//        if (files.length == 0) {
//           return null;
        // System.out.println("Dir " + dir + " is empty");
//        }
        //move trough array of the inner files of current dir
        for (File f : files) {
            if (f.isFile()) {
                //check file name with "contains" because file has a
                if (f.getName().contains(keyWord)) {
                    //append founded file name to the List<String> resaultArray
                    resaultArray.add("--------------------------------------\n" + "File "
                            + "\"" + f.getName() + "\"" + " found in:  " + f.getAbsolutePath());
                }
            } else {
                if (f.getName().equalsIgnoreCase(keyWord)) {
                    //append founded file name to the List<String> resaultArray
                    resaultArray.add("--------------------------------------\n" + "Dir "
                            + "\"" + f.getName() + "\"" + " found in:  " + f.getAbsolutePath());
                }
                findRefactored3(f.getCanonicalFile(), resaultArray, keyWord);
            }
        }
        return resaultArray;
    }*/

  /* public List<String> findRefactored4(File dir, List<String> resaultArray, String keyWord) throws IOException {
       File file = new File(dir.getPath());
       if (!file.exists()) {
           throw new FileNotFoundException("Указанный файл отсуствует");
       }
       //get list of files in the current dir
       File[] files = file.listFiles();
       //move trough array of the inner files of current dir
       for (File f : files) {
           //at first check is current element a File
           if (f.isFile()) {
               //check file name with "contains" because file has a
               if (f.getName().contains(keyWord)) {
                   //append founded file name to the List<String> resaultArray
                   resaultArray.add("--------------------------------------\n" + "File "
                           + "\"" + f.getName() + "\"" + " found in:  " + f.getAbsolutePath());
               }
               //for the directories
           } else {
               if (f.getName().equalsIgnoreCase(keyWord)) {
                   //append founded file name to the List<String> resaultArray
                   resaultArray.add("--------------------------------------\n" + "Dir "
                           + "\"" + f.getName() + "\"" + " found in:  " + f.getAbsolutePath());
               }
               findRefactored4(f.getCanonicalFile(), resaultArray, keyWord);
           }
       }
       return resaultArray;
   }
   */


    private class FileCantDownloadExeption extends RuntimeException {
        public FileCantDownloadExeption(String s) {
        }
    }
}

package com.jss.fileactions;


import com.sun.org.apache.xpath.internal.SourceTree;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Bash test menu
 */
public class BashTestmenu implements Serializable {
    Scanner sc = new Scanner(System.in);
    User user = new User("22", "Vasa");
    Bash bash = new Bash();

    public void initFile() throws IOException, ClassNotFoundException {

        System.out.println("Enter path to the test Directory:");
        String testPath = sc.nextLine();
        // String testPath = "D://Test Dir2";

        //create dir from console path input
        bash.touch(testPath);
        //append to the dir path way to test txt file
        String createdTestFile = testPath.replaceAll(testPath, testPath + "/createdTestFile.txt");
        File file = new File(createdTestFile);
        //create new createdTestFile.txt
        file.createNewFile();
        //fill createdTestFile.txt  with test text data
        bash.writeInto(file.getPath(), "Hello, we create new File for you!\nCreatedTestFile location: " + file.getAbsolutePath() +
                "\nThis is test text for using bash program:\nHello world! Hello friend! Hi there!\nTrough the hardship to the stars.\n" +
                "All in good time.\nNeither fish nor flash.\nstars, world, fish, friend.");

        String serializationFile = serialisationInit(testPath);

        //call Main Menu
        mainMenu(testPath, createdTestFile, serializationFile);
    }

    public void mainMenu(String testPath, String createdTestFile, String serializationFile) throws IOException, ClassNotFoundException {
        System.out.println("Добро пожаловать в test Bask");
        System.out.println(">>>>>>>MAIN MENU / ГЛАВНОЕ МЕНЮ<<<<<<<:");
        System.out.println("Выберите действие");
        System.out.println("\"0\" - less - show test file content");
        System.out.println("\"1\" - appendTo - add data from console to the test file");
        System.out.println("\"2\" - touch - create new dir");
        System.out.println("\"3\" - delete - deleting file or directory");
        System.out.println("\"4\" - copy - copy file from src to dst");
        System.out.println("\"5\" - grep - find lines with keyword");
        System.out.println("\"6\" - saveObjToFile with serialization");
        System.out.println("\"7\" - deSerialization - replicate saved object from file");
        System.out.println("\"8\" - ls - show forks directories and inner files" +
                "Удаление контакта по мультипараметру(имени или номеру) и отображение контакт - листа без него");
        System.out.println("\"9\" - writeInto write data from console to the test file");

        System.out.print("Сделайте выбор пункта меню: ");
        Scanner sc = new Scanner(System.in);

        String selection = sc.nextLine();
        String res = menuValidator(selection);

        int sel = Integer.parseInt(res);

        switch (sel) {
            case 0: {
                System.out.println("less:");
                System.out.println(bash.less(createdTestFile));
                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
            case 1: {
                System.out.println("appendTo:");
                System.out.println("Enter additional content and pres Enter");
                String content = sc.nextLine();
                bash.appendTo(createdTestFile, content);
                System.out.println(bash.less(createdTestFile));

                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
            case 2: {
                System.out.println("touch:");
                System.out.println("Enter path to the test new  directory:");
                String testDirPath = sc.nextLine();
                bash.touch(testDirPath);
                System.out.println("Dir " + testDirPath + " was creating.");
                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
            case 3: {
                System.out.println("delete:");
                System.out.println(bash.delete(createdTestFile) ? "Successful deleting\n" : "Deleting fail");
                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
            case 4: {
                System.out.println("copy:");
                System.out.println("Enter dest path to the copy of the test file:");
                String testDestPath = sc.nextLine();
                bash.touch(testDestPath);
                System.out.println(bash.copy(createdTestFile, testDestPath) ? "Copying successfully\n" : "Copying fail");
                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
            case 5: {
                System.out.println("grep by keyword \"world\"");
                bash.listStrCorrectShow(bash.grep(createdTestFile, "world"));
                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
            case 6: {
                System.out.println("serialization: ");
                System.out.println(bash.saveObjToFile(user, serializationFile) ? "Serialization successfully" : "Serialization fail");
                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
            case 7: {
                System.out.println("Deserialization: ");
                User unserialisedUser = bash.deSerialization(new User(), serializationFile);

                System.out.println(unserialisedUser);
                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
            case 8: {
                System.out.println("ls: ");
                System.out.println("Enter path to show hiw forks directories and inner files:");
                String startPath = sc.nextLine();
                bash.ls(startPath);
                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
            case 9: {
                System.out.println("recursive find: ");
                List<String> resArray = new ArrayList<>();
                System.out.println("Enter start path to begin search: ");
                String startPath = sc.nextLine();
                System.out.print("Enter keyword to search: ");
                String keyword = sc.nextLine();

                bash.listStrCorrectShow(bash.findRefactored(new File(startPath), resArray, keyword));
                subMenu(testPath, createdTestFile, serializationFile);
            }
            break;
        }
    }

    private String serialisationInit(String testPath) throws IOException {
        String serializationDir = testPath.replaceAll(testPath, testPath + "/serialized");
        bash.touch(serializationDir);
        String serializationFile = serializationDir.replaceAll(serializationDir, serializationDir + "/serialFile.txt");
        File serialFile = new File(serializationFile);
        serialFile.createNewFile();
        return serializationFile;
    }

    public void subMenu(String testPath, String createdTestFile, String serializationFile) throws IOException, ClassNotFoundException {
        System.out.println("\"0\" - Return to the MAIN MENU");
        Scanner sc = new Scanner(System.in);
        int subSelect = sc.nextInt();
        while (subSelect != 0) {
            System.out.println("Incorrect Selection");
            subSelect = sc.nextInt();

        }
        mainMenu(testPath, createdTestFile, serializationFile);
    }


    /**
     * Валидатор вібора пункта меню
     */
    public static String menuValidator(String selection) {
        Scanner sc = new Scanner(System.in);
        while (!checkSelection(selection)) {
            System.out.println("Не правильно введен пункт меню. ВВедите число от 0 до 9. Пример: 7");
            selection = sc.nextLine();
        }
        return selection;
    }

    /**
     * Патерн валидации выбора пункта меню, число 0-9, один символ
     */
    public static boolean checkSelection(String selection) {

        Pattern p = Pattern.compile("^[0-9]{1}$");
        Matcher m = p.matcher(selection);
        return m.matches();
    }

}
package com.jss.fileactions;

import java.io.Serializable;

/**
 * Car test class
 */
public class Car implements Serializable {
    private String model;
    private String color;

    public Car() {

    }

    public Car(String model, String color) {
        this.model = model;
        this.color = color;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    @Override
    public String toString() {
        return "Car{" +
                "model='" + model + '\'' +
                ", color='" + color + '\'' +
                '}';
    }
}
package com.jss.fileactions;

/**
 * Created by Стас on 31.08.2016.
 */
public class CurrentDirIsEmptyExeption extends RuntimeException {
    public CurrentDirIsEmptyExeption(String s) {
    }
}
package com.jss.fileactions;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;


public interface IBash {

    // show file content


    String less(String path) throws FileNotFoundException;

    void writeInto(String path, String content) throws FileNotFoundException;

    void appendTo(String path, String content) throws FileNotFoundException;

    // show files in current directory
    List<String> ls(String currentDirPath) throws FileNotFoundException;

    // use File
    // create new file
    boolean touch(String path) throws IOException;

    boolean delete(String path) throws FileNotFoundException;

    boolean copy(String src, String dest) throws FileNotFoundException;

    List<String> grep(String src, String keyWord) throws FileNotFoundException;

    //shallow copy
    // use standard clone mechanism in java
    Object clone(Object obj);

    byte[] toByteArr(Object obj) throws IOException;

    Object fromByteArr(byte[] arr) throws IOException;

    // do deep copy via Java Serialization, use above methods
    Object cloneDeep(Object obj) throws IOException;

    boolean saveObjToFile(Object obj, String filePath) throws IOException;

    <T> Object deSerialization(T obj, String filePath)throws IOException, ClassNotFoundException;

    boolean downloadFile(String url, String localPathName) throws IOException, ClassNotFoundException;

    // implement recursive search (find in curr directory, then find in child dir, then repeat...)

    List<String> findRefactored(File dir, List<String> resaultArray, String keyWord) throws IOException;

    List<String> find(File dir, List<String> resaultArray, String keyWord) throws IOException;

    List<String> findRefactored2(File dir, List<String> resaultArray, String keyWord) throws IOException;


}
package com.jss.fileactions;

        import java.io.File;
        import java.io.IOException;
        import java.io.Serializable;
        import java.util.ArrayList;
        import java.util.List;

/**
 * Test Bash Actions with files
 */
public class TestFileActions implements Serializable{
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        Bash bash = new Bash();
        User user = new User("22", "Vasa");
        String path = "d://FileActions";
        BashTestmenu btm = new BashTestmenu();
        btm.initFile();
//        bash.writeInto(path, "Hi there\nHello world\nWorld is beautiful\nThrout the hardship to the stars\nworld");
//        System.out.println(bash.less(path));
//        System.out.println("------------------------------------------------");
//
//        System.out.println(bash.copy(path, "d://FileActions_copy") ? "Copying successfully\n" : "Copying fail");
//        System.out.println(bash.less("d://FileActions_copy"));
//        System.out.println("------------------------------------------------");
//
//        System.out.println(bash.delete("d://FileActions_copy") ? "Successful deleting\n" : "Deleting fail");
//        System.out.println("------------------------------------------------");
//
//        bash.ls("d://Test Dir");
//        System.out.println("------------------------------------------------");
//
//        System.out.println(bash.touch("d://Test Dir/NewFileFromTouch") ? "File was create\n" : null);
//        bash.ls("d://Test Dir");
//        System.out.println("------------------------------------------------");
//
//        bash.listStrCorrectShow(bash.grep(path, "world"));
//        System.out.println("------------------------------------------------");
//        System.out.println("Cloning test");
//
//        Bash bash2 = (Bash) bash.clone(bash);
//        System.out.println(bash2.less(path));
//        System.out.println("------------------------------------------------");
        List<String> resaultArray = new ArrayList<>();
//        bash.listStrCorrectShow(bash.find(new File("d://Test Dir"),resaultArray, "teo"));
//        System.out.println("------------------------------------------------");
//        System.out.println("------------------------------------------------");

//
//        System.out.println("------------------------------------------------");
//        bash.listStrCorrectShow(bash.findRefactored(new File("d://Test Dir"), resaultArray, "teo"));
//        Car car = new Car("Lexus", "Black");
//        bash.saveObjToFile(car, "d://Test Dir/serialUser.txt");
//
//
//        System.out.println((bash.deSerialization(new Car(), "d://Test Dir/serialUser.txt")).toString());
//    bash.less("d://Test Dir");

        //  bash.downloadFile("d://Test Dir/serial.txt", "d://Test Dir/downloaded.txt");
    }

}
package com.jss.fileactions;

import java.io.Serializable;

/**
 * Usec class
 */
public class User implements Serializable {
    private transient String specialStr;
    private String age;
    private String name;

    public User() {
    }

    ;

    public User(String age, String name) {
        this.age = age;
        this.name = name;
    }

    public String getAge() {
        return age;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "User{" +
                "age='" + age + '\'' +
                ", name='" + name + '\'' +
                '}';
    }
}

